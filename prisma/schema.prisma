generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SchoolAdmin {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  password        String
  createdAt       DateTime      @default(now())
  drivingSchool   DrivingSchool @relation(fields: [drivingSchoolId], references: [id])
  drivingSchoolId Int           @unique
  role            Role          @default(SCHOOL_ADMIN)
}

model DrivingSchool {
  id                                  Int      @id @default(autoincrement())
  name                                String
  address                             String
  branches                            Json?
  phone                               String
  email                               String
  websiteUrl                          String?
  socialMediaLinks                    Json?
  openingHours                        String?
  city                                String
  serviceArea                         String?
  licenseClasses                      String[] @default([])
  transmissionType                    String[] @default([])
  baseFee                             Float?   @db.Real
  pricePerStandardLesson              Float?   @db.Real
  pricePerSpecialLesson               Float?   @db.Real
  theoryCourseIncluded                Boolean? @default(false)
  theoryCoursePrice                   Float?   @db.Real
  firstAidCourseOffered               Boolean? @default(false)
  firstAidCoursePrice                 Float?   @db.Real
  visionTestOffered                   Boolean? @default(false)
  visionTestPrice                     Float?   @db.Real
  tuevDekraRegistrationIncluded       Boolean? @default(false)
  practicalExamFee                    Float?   @db.Real
  theoryExamFee                       Float?   @db.Real
  averageFinalPrice                   Float?   @db.Real
  trainingLanguages                   String[] @default([])
  supportForDisabled                  Boolean? @default(false)
  hasDigitalClasses                   Boolean? @default(false)
  hasOnlineRegistration               Boolean? @default(false)
  offersIntensiveCourses              Boolean? @default(false)
  specialOffers                       String[] @default([])
  specializationInAccompaniedDriving17 Boolean? @default(false)
  financingOptions                    String[] @default([])
  successRate                         Float?   @db.Real
  logoUrl                             String?
  galleryImageUrls                    String[] @default([])
  videoPresentationUrl                String?
  allowReviews                        Boolean? @default(true)
  canRespondToReviews                 Boolean? @default(false)
  description                         String?
  createdAt                           DateTime @default(now())
  schoolAdmin                         SchoolAdmin?
}

model SuperAdmin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  role      Role     @default(SUPER_ADMIN)
}

enum Role {
  SCHOOL_ADMIN
  SUPER_ADMIN
}
